
//////////////////////////////////
/// Constructor and Destructor ///
//////////////////////////////////

Constructor initialization lists
-More efficient because you assign the value when its created
Player::Player()
    : name {"None"}, health{0}, xp{0} {

    // statements
}

Player::Player(std::string name_val)
    : name {name_val}, health{0}, xp{0} {

    // statements
}

Delegating Constructors
-Can call another constructor in the initialization list

Player::Player(std::string name_val, int health_val, int xp_val)
    : name {name_val}, health{health_val}, xp{xp_val} {
    // statements
}

Player::Player()
    : Player {"None",0, 0} {
    // statements
}

Player::Player(std::string name_val)
    : Player {name_val, ,0 , 0} {
    // statements
}

Copy Constructor
-When using raw pointers it is good practice to have a user defined constructor
that does a deep copy.
Type::Type(int d) {
    data = new int;
    *data = d;
}
Type::Type(const Type &source) : Type(*source.data) {}

Move Constructor
-Introduced by c++11 to move objects instead of copying them.
-Recommended when you have raw pointers
-"Copy elision" - C++ may optimize copying away completely (RVO-Return Value
optimization)
Type::Type(Type &&source) noexcept
    : data{source.data} {
    source.data = nullptr;
    cout << "Move constructor - moving resource: " << *data << endl;
}
"Steals" the data and nulls out the source ptr.

r-value references use "&&"
int x {100}
int &l_ref = x;
l_ref = 10;
int &&r_ref = 200;
r_ref = 300;
int &&x_ref = x; // ERROR - x is an l-value


///////////////////////////
/// Classes and Objects ///
///////////////////////////

Include Guards
-Preprocessor guarantees that the include file will only be looked at once
#ifndef _ACCOUNT_H_
#define _ACCOUNT_H_
// Account class declaration
#endif
- OR -
#pragma once

Public vs. private vs. protected
-public: accessible everywhere
-private: accessible only by members or friends of the class
-protected: used with inheritance

Encapsulation:
-Objects contain data AND operations that work on that data
-Abstract Data Type (ADT)

Information hiding:
-Implementation-specific logic can be hidden
-easier to test, debug, maintain, and extend

Reusability:
-Easier to reuse classes in other applications
-Already tested

Inheritance
-Create new classes in term of existing classes
-Enables reusability
-Polymorphic classes

const correctness
-Any getter in your class should be const
void get_name() const {
    return name;
}

Static class members
-Useful for counting how many class objects exist
class Player {
    private:
        static int num_players;
    public:
        Player() {
            ++num_players;
        }
        ~Player() {
            --num_players;
        }
        static int get_num_players() const {
            return num_players;
        }
}

Structs vs. Class
-Use struct for passive objects with public access
-Don't declare methods in a struct
-Use class for active objects with private access
-implement getters/setters as needed
-implement member methods as needed.

Friends of a class
-Friendship must be declared explicitly
-Friendship is not symmetric
-Friendship is not inherited or transitive

non-member function
class Player {
    friend void display_player(Player &p);
}

void display_player(Player &p) {
    p.name;
    p.xp;
    p.health;
    //no getters needed
}

Another class as a friend
-This means Other_class has access to all members of class Player
class Player {
    friend class Other_class;
}


///////////////////////////////
/// Pointers and References ///
///////////////////////////////

Raw vs. smart pointers (C++11)

a variable - whose value is an address

What can be at that address?
- Another variable
- A function

We can allocate memory dynamically on the heap or free store
- This memory doesn't even have a variable name.
- The only way to get to it is via a pointer

With OO pointers are how polymorphism works!

Initialize pointers in C++11:
variable_type *pointer_name  {nullptr};
OR
variable_type *pointer_name  {};

Accessing Pointer Address: '&'
int num {10};
cout << num << endl; // 10 value of the variable
cout << &num << endl; // 0x61ffc address where the variable is stored

int *p;
cout << p << endl; // garbage data
cout << &p << endl; // address where the pointer is stored
cout << sizeof p << endl; // 4
p = nullptr;
cout << p << endl; // 0 value of the address of the pointer

*The value of a pointer is an address to the beginning of the type.

sizeof a ptr variable will be the same on a machine
- Most cases it is 4 meaning 4 bytes

Deferencing a pointer '*' - access the data we're pointing to
int score {100};
int *score_ptr {&score}; // store the address of score using the '&'
cout << *score_ptr << endl; // 100
*score_ptr = 200; // dereference the pointer which is 'score'
cout << *score_ptr << endl; // 200
cout << score << endl; // 200

vector<string> stooges {"Larry","Moe","Curly"};
vector<string> *vector_ptr {nullptr};
vector_ptr = &stooges; // store address to vector
cout << (*vector_ptr).at(0) << endl; // deference the ptr to vector. operate
cout << (*vector_ptr).at(1) << endl; // on the vector directly with 'at()'
cout << (*vector_ptr).at(2) << endl;
OR
for (auto stooge: *vector_ptr) // working directly on the vector object
    cout << stooge << " ";
cout << endl;

Dynamic Memory Allocation:
-Allocate storage from the heap at runtime
-Use pointers to access newly allocated storage

int *int_ptr {nullptr};
int_ptr = new int; // allocates integer on the heap
cout << int_ptr << endl; // address
cout << *int_ptr << end; // value is garbage!
*int_ptr = 100;
cout << *int_ptr << endl; // value is 100
delete int_ptr; // frees the allocated storage

Using pointers in expressions:
int scores[] {100,95,90};
int *score_ptr {scores};
cout << score_ptr << endl; // 0x61ff10 --> 100
cout << *score_ptr << endl; // 100
cout << (score_ptr + 1) << endl; // 0x61ff14 --> 95
cout << *(score_ptr + 1) << endl; // 95
cout << (score_ptr + 2) << endl; // 0x61ff18 --> 89
cout << *(score_ptr + 2) << endl; // 89

Pointer Arithmetic:
(++) and (--) will increment and decrement the pointer respectively.
(+) and (-) will move the pointer to the next or previous address.
using '==' compares the location of 2 pointers
- Deference the ptrs to compare the values!

char name[] {"Frank"};
char *char_ptr1 {nullptr};
char *char_ptr2 {nullptr};
char_ptr1 = &name[0]; // F
char_ptr2 = &name[3]; // n

Const and pointers:
-Pointers to constants
    * the data pointed to by the pointers is constant and can't be changed
    * the pointer itself can change and point somewhere else
    const int *int_ptr;
-Constant pointers
    * the data pointed to by the pointers can be changed.
    * The pointer itself can't change and point somewhere else.
    int const *int_ptr;
-Constant pointers to constants
    * the data pointed to by the pointers is constant and can't be changed
    * The pointer itself can't change and point somewhere else.
    const int const *int_ptr;

Passing pointers to functions:
- Pass-by-reference with pointer parameters
void double_data(int *int_ptr);
void double_data(int *int_ptr) {
    *int_ptr *= 2;
}

int value {10};
int *int_ptr {nullptr};
cout << value << endl; // 10
double_data(&value);
cout << value << endl; // 20

int_ptr = &value; // address --> 20
double_data(int_ptr);
cout << value << endl; // 40

Returning a pointer from a function:
- functions can return an address which can be very powerful
int *function_name()

returning dynamically allocated memory from a function
- Common use case for returning a pointer
int *create_array(size_t size, int int_value = 0) {
    int *new_storage {nullptr};
    new_storage = new int[size];
    for (size_t i {0}; i < size; ++i)
        *(new_storage + i) = init_value;
    return new_storage;
}

Potential Pointer Pitfalls
- Uninitialized pointers
    * Means they contain garbage or pointing to something that is important
- Dangling pointer
    * Pointer that is pointing to release memory
    * Pointer that points to memory that is invalid i.e. in functions
- Not checking if new failed
    * if new fails an exception is thrown
    * Use exception handling
- Leaking memory
    * Forgetting to release allocated memory with delete

What is a reference?
- An alias for a variable
- Must be initialized to a variable when declared
- A constant pointer that automatically dereferences when its used.

/////////////////
/// Functions ///
/////////////////

Function Calls
-Functions use the 'function call stack'
    * LIFO - Last IN First Out
    * push and pop
-Stack Frame and Activation Record
    * Stack size is finite - watch out for stack overflow!

inline functions are useful to avoid function call overhead on the stack

Recursive Functions:
-Examples: Factorials, fibonacci, factals
-Searching and sorting: binary search, search trees,...
-Parts:
    *Base case
    *Recursive case

Factorial:
unsigned long long factorial(unsigned long long n) {
    // Base case
    if (n == 0)
        return 1;
    return n * factorial(n-1); // recursive case
}

void scale_number(int &num);

int main () {
    int number {1000}; // defintion of actual parameter
    scale_number(number); // pass actual parameter by reference;
    cout << number << endl;
    return 0;
}

void scale_number(int &num) {
    if (num > 100)
        num = 100; // formal parameter as alias to actual parameter
}

Good practice:
for read-only functions pass parameters as "const" and by reference
- no copy created better for performance

///////////////////
/// Course Info ///
///////////////////

Indexes:
https://www.tiobe.com/tiobe-index/
https://pypl.github.io/PYPL.html
https://spectrum.ieee.org/at-work/innovation/the-2018-top-programming-languages

Installing C++ Compilers:
> Windows
--Download MinGW-w64 (mingw-w64.org)
    -- MingW-W64-builds		Rolling
--CodeLite IDE: > codelite.org
    1. Help --> Run the setup wizard

> Web IDE
--cpp.sh (C++ shell)
--webcompiler.cloudapp.net

Overview
--Structure
--Variables and constants
--Arrays and vectors
--Strings in C++
--Expressions, Statements and Opertors
--Statements and Operators
--Determining control flow
--Functions
--Pointers and References
--OOP -- Classes and Objects
--Operator Overloading
--Inheritance
--Polymorphism
--Smart Pointers
--The Standard Template Library (STL)
--I/O Streams
--Exception Handling

Linker Errors:
--Linker is having trouble linking all the objects together to create the executable
    --Usually it is missing library or object file

////////////////////
/// Polymorphism ///
////////////////////

"Polymorphism allows your program to determine its behavior at runtime
and helps you think in the general."

Overloading functions is a type of polymorphism
-we can have the same name work with different data types to execute similar behavior
polymorphism --> Many forms for the same function

///////////////
/// Strings ///
///////////////

In modern C++ you should only work with C++ Strings
-- Don't use C-style strings i.e. char*

Character Functions
#include <cctype>
Examples:
isalpha() - True if letter
islower() - True if letter is lowercase
tolower() - returns lowercase of letter
toupper() - returns uppercase of letter

C-style strings - sequence of chars "null terminated strings"
-contiguous in memory
-Array of characters
-terminated by null character '\0'
Example: "C++ is fun" String literal
['C','+','+',' ','i','s',' ','f','u','n','\0']
Size=Num of chars + null = 10+1 = 11

In C-style strings you can't use the assignment operator
Use strcpy() instead
strcpy(my_name, "george")

#include <cstring>
Functions:
-Copying, concatentation, comparison, searching, and more
char str[80];
strcpy(str, "Hello ");
strcat(str, "there ");
strlen(str); // return # of chars before null char called "size_t"
Hint: use "size_t" because it will always work regardless of the system

#include <cstdlib>
Convert c-style strings to
-Integer
-float
-long

C++ Strings - #include <string>
-std namespace
-contiguous in memory
-dynamic size
-works with input and output streams
-lots of useful member functions
-familiar operators can be used +,=,<,>,...
-Easeily convereted to c-style strings if necessary
-Safer

Common functions:
length()
substr()
erase()
clear()
find()

string::npos // useful in combination with find()
size_t position = s1.find(word);
if(position != string::npos)
    ..do something...

///////////////
/// Vectors ///
///////////////

#include <vector> or namespace std
-Container in C++ STL
-Very efficient
-can provide Bounds checking functions
-elements are the same type
-elements intialized to zero

Accessing vector elements
vector_name.at(element_index) // provides bounds checking

vector_name.push_back(element) // grow and add to the end

2D vectors
vector <vector<element_type>> vector_name
vector_name.at(row_index).at(col_index) // provides bounds checking

/////////////////
/// Operators ///
/////////////////

Arithmetic order
PEMDAS
Parentheses, Exponent, Multiplication, Division, Addition, Subtraction

Increment and decrement operators
Prefix ++num - happens before the operand
postfix num++ - happens after the operand

Example: Pre increment
result = ++counter;
means
counter = counter+1;
result = counter;

Example: Post increment
result = counter++;
means:
result = counter;
counter = counter+1;

result = ++counter +10;
means
counter = counter+1;
result = counter +10;

result = counter++ + 10;
means
result = counter + 10;
counter = counter+1;

Relational Operators
C++20 "Three way comparison"
<=>
Evaluate to 0 if equal
Evaluate to < than 0 if the lhs > rhs
Evaluate to > than 0 if the lhs < rhs

Logical Operators precedence
not '!' is higher than and '&&'
and '&&' is higher than or '||'

Operator precedence:
[] -> . ()
++ -- not -(unary) *(de-ref) & sizeof (Associativity: Right to left)
* / %
+ -
<< >>
< <= > >=
== !=
&
^
|
&&
||
= op= ?: (Associativity: Right to left)

the conditional operator "?:" is a ternary operator

//////////////
/// Basics ///
//////////////

The 3 basic building blocks of a program:
-sequence
-selection
-iteration

Range-based for loop - Added in C++11
for (var_type var_name: sequence or collection)
    statement; // can use var_name

auto keyword asks the compiler to figure out the type
int scores [] {100,90,80};
for (auto score: scores)
    cout << score << endl;

Higher vs. lower types:
long double > double > float > unsigned long > long > unsigned int > int
short and char types are always converted to int
Promotion: double + int --> int is promoted to double before '+'

Demotion:
int num {0};
num = 100.2 --> 100.2 is demoted to 100 befor assignment

cout << (num1 == num2) << endl; --> displays 1 or 0
std:boolalpha
cout << (num1 == num2) << endl; --> displays True or False
std::noboolalpha

If you need to better random numbers use the header <random>
RAND_MAX is guaranteed to be at least 32767

In C++14 you can use tick marks to split up big numbers
7600000000 -> 7'600'000'000

using the list intializing will catch errors like possible overflows

Don't use defined constants in Modern C++
Yes - const double pi {3.1415926}
no - #define pi 3.1415926

Identifiers are created by programmers
Examples: std::endl
"::" scope operator
Preprocessor directives start with "#"
Namespaces are used to help with naming conflicts

